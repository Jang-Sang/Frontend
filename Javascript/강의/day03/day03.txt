


 * 입력 - 연산 - 출력 (설계 및 검증)

 ex) 구글링을 할 때 중요한 것

    예약번호를 조회해서 고객이름을 검색하는

    * 예약번호로 고객번호 조회하는 javaScript
    * 오브젝트(집단)에서 특정한 값 조회 --> (find, findIndex)


#1. 고객목록을 가지고온다.
#2. 고객 목록에서 내가 입력한 특정 예약번호로 데이터를 찾아온다.
#3. 고객 목록(집단)에서 특정한 값을 조회해아한다. (검색)

특정 단어로 검색을 하기보단 알고리즘 단위로 검색해서 이해해야한다.
남의 감수성은 이해할 수 없으므로 굉장히 비효율적일수 있다.
모르는 것은 더욱 상세하게 나눠서 검색해야한다.

반드시 배웠던것을 구현해보고 검증해보고 이해해야한다.


 제어문
    
    조건문
        if ["만약에, 아니면", "조건식"]
        switch ["값", "case", "break"]

    반복문
        주어진 "조건식"의 결과가 참(true)일 때까지 해당 블럭(구역, { ... } )의 로직(기능,코드)
        를 반복 실행한다.

        * (1) for문 -- 가족 (forEach, for..in, for..of)
                
                ex) 
                for(초기화식; 조건식; 증감식){
                    조건식이 참인 경우 실힝할 문장
                }

                for(let i = 0; i < 10; i++){
                    console.log(i) -- 반복 실행할 문장
                }

                console    i
                // 0 ----> 1
                // 1 ----> 2
                ....
                // 9 ----> 10 -- 여기까지만 반복


        (2) while문 - 무한 루프에 많이 사용된다

            while(조건식){
                조건식이 true일 동안 실행할 문장
            }


            무한루프
                외부의 값에 의해 탈출문이 실행될 때까지 무한 반복

                let count = 0;

                while(true){
                    .. 무한 반복
                    count++;
                    if(count === 3) break;    
                }

            do... while문
                while문과 기능은 같지만 조건식이 false라 할지라도
                "무조건 한 번"은 실행하고 반복

                let count = 3;
                
                do{
                    console.lolg(count)
                } while( count < 3 )
                
                // 3

------------------------------------------------------------------------------------ 
                

    * 함수 ( Function )
      
      자바스크립트는 함수 지향형 프로그래밍 
      최근 들어서는 객체 지향의 장점들이 녹아드는 중

      함수 지향이란 무엇일까?
        프로그래밍 패러다임의 한 종류
        순수 함수를 조합하고 함수를 일급 객체로서 사용하여 프로그래밍 하는 방식

    
      프로그래밍 패러다임이란?
        개발자에게 프로그래머로서의 관점을 갖게하고 결정하는 역할 => 개발 방법


        명령형
            절차 지향 : 순서를 중요 시, 컴퓨터의 처리구조와 비슷, 속도가 빠름 (C, Cobol...)
            객체 지향 : 객체(집단)의 상호 작용을 중요 시, 유지 보수 용이 (Java, C++)

        선언형 (어떻게 할 것인가보다는 무엇을 할 것인가가 중요)
            함수 지향 : 순수 함수를 조합하고 프로그래밍 하는 방식 (Javscript)


      함수 지향 프로그래밍 관련 용어

        불변성 = 함수 밖에서 데이터의 변형을 일으켜서는 안된다
        클로저 = 부모 함수가 실행 종료되어도 참조할 수 있는 내부 함수는 기억된다
        순수함수 = 입력 값에만 의존하고, 부수효과는 연산에 영향을 미치지 않는다
        일급객체 함수 = 함수를 입력 값(파라미터, 매개변수, 인자)으로 사용할 수 있고
                      반환 값(출력)으로 사용할 수 있다

        유지관리가능성 = 외부 효과에 의존되지 않으면 해당 부분만 수정하면 되기 때문에 
                        유지보수가 쉽다

        모듈화 = 함수를 분리하여 재사용 및 관리가 용이하도록 구성해야한다
        부수효과 = 함수 밖에서 함수의 연산에 영향을 끼치면 안된다. (외부효과, 사이드이펙트)
        참조투명성 = 동일한 값에는 항상 동일한 반환 값


        p.s 위 언어를 모두 완벽하게 이해하고 코드를 작성해야한다면 처음부터는 어렵다.
        따라서 당장은 자바스크립는 함수를 기반으로 하는 함수 지향형 프로그래밍이다.

-------------------------------------------------------------------------------------

        함수
            어떠한 기능을 만든다에 의존하고 초점
        
            ex)
                나는 두개의 숫자를 전달받고
                두 숫자를 합치는 함수를 작성하고 싶다

            선언부
                - 선언부는 함수를 실행하는 것이 아니라
                - 기능만 구성하여 컴퓨터에게 기억시키는 것 => 재사용

                function addNumber(파라미터1, 파라미터2, ....)
                                ------------------------\
                                        실행부에서 전달받은 값
                                        파람, 매개변수, 인자

                {
                    ... 작성하고 싶은 연산
                    파라미터1 + 파라미터2
                    반환 값 (생략가능)
                }


            실행부
                함수명(전달 값1, 전달 값2);

            ex)
                function sum(num1, num2){
                   console.log(num1 + num2)
                }

                sum(3,5)

            반환값

                sum(3,5)
                +9;

                console.log(sum(3,5) + 9)
                            ------ undefined



                function minus(num1, num2){
                  console.log(num1 - num2)
                  return num1 - num2
                }

                console.log(minus(3,5) + 9

                    -> 기능 -> 값이 할당


                * 반환 값은 해당 함수 실행부에 값을 부여한다는 의미
                  만약에 return이 없다면 비즈니스 로직만 실행하고 값은 undefined

                  즉 함수의 기능은 정삭작동하나 값은 존재하지 않는 상태
                  따라서, 이 함수에 값을 주자 return이 있음
            
-------------------------------------------------------------------------------------


    (1) 기명함수, 익명함수

        기명함수: 이름을 지어준다
        익명함수: 이름이 없는 함수

        function hello(){
            console.log("hello")
        }

        --------------------------------------------------------------------------

        function(){
            console.log("world")
        }
        -- 다른 함수의 매개변수로 전달되어 실행되는 함수 (콜백함수 클로저, 즉시실행함수)
        -- 재사용 가능성이 없는 경우

        --------------------------------------------------------------------------

        ex) array.map(function(el,index,arr){})


    (2) 재귀함수, 즉시실행함수

            재귀 함수
                함수 안에서 같은 함수를 실행 (반복)
                [코딩테스트 최단 경로 관련 알고리즘 문제 단골]
                함수 안에서 챗바퀴 돌듯이 재실행된다.

                function f(n){
                    if(n <= 1){
                        return 1
                    }
                    return n + f(n-1)
                }

                f(10) // 55
                10 + 9 + 8 ... + 1 = 55

                반복문에도 사용되긴 하지만 보통 탐색에 제일 많이 사용된다.

                나중에 무조건 보게 되는 로직


            즉시실행함수
                실행부 없이 선언부만으로 바로 실행
                보통은 익명함수로 주는 경우가 많음

                괄호 두개 열어준다

                (functio(){
                    ... 로직
                })()

    (3) * 화살표 함수
            function 키워드 대신 (=>)를 사용하여 보다 간략한 방법으로 함수 선언 가능
            ES6, ES7의 문법
            react 사용하면서 거의 이것만 사용했다...
            
            ex)

                function a (param1, param2){

                }


                function(){

                }

                일반자바스크립트에서 주로 사용
                -----------------------------

                const a = (pram1, param2) => {

                }

                () =>  {

                }

                리액트에서 주로 사용
                -----------------------------
                기능적으로 function과 화살표함수가 차이가 없다.
                실무에서는 화살표함수 거의 사용한다.
                둘중에 하나로 통일해서 사용해야한다.
-------------------------------------------------------------------------------------


    
      





