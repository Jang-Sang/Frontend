
 스코프 (scope)

    변수에 접근할 수 있는 범위
    변수를 찾기 위한 규칙

    자바스크립트에서 스코프란 전역스코프와 지역스코프
    
    전역 스코프에는 어떠한 곳에서도 접근이 가능한 값이 지정
    지역 스코프에는 특정한 블럭 내에서만 접근이 가능한 값 지정



    지역 변수
        특정한 구역 내에서만 사용할 수 있는 변수 (지역 스코프에 포함)

    
    전역 변수 
        전체에서 사용이 가능한 변수, 웹 페이지가 닫혀야만 메모리에서 사라짐

    
    function printNumber(){
        const number = 5;
        console.log(number)
    }
    
    printNumber(); // 5
    console.log(number) // 5


    스코프 체인
        let c =7;
       a 구역 {
            let b =5;
             b구역 {
                let a =5;
                let c =3;
                console.log(a,b,c)
            }   

        }

----------------------------------------------------------------------------------------------------------

    타입변환

        자바스크립트는 데이터 타입이 없다 있다? 있다.
        런타임 시 안에 넣어있는 값에 따라 타입이 추론되어 부여 --- 암묵적 타입 변환


        그러나 자바스크립트의 타입은
        특수한 경우 강제적으로 형변환 되는 경우도 있고
        개발자의 의도에 따라 형변환 되는 경우가 있습니다. ---- 강제 타입 변환


        let a = 10;
        let b = 10 + ''; // "10"

        console.log(typeof a)
        // 디버깅용으로 사용
        // 내가 원하는 값으로 들어갔는지 확인할 때 사용
        // 타입을 콘솔에 찍는 것
        // 문자열과 숫자를 구분할 때


        function a(number){
            if(!number) return; <----------- ealry retrun;

            let parseNumber = number;
            if(typeof number === string){
                parseNumber = parseInt(number)
            }
        }

        얼리리턴 
        리턴 아래는 실행하지 않고 일찍 반환하는 것
        얼리리턴은 리턴값에 아무런 영향을 주지 않는다.
        얼리리턴과 리턴을 구별할 수 있는 방법은 로직을 짠 개발자만이 알 수 있다. 
        그러므로 보통 다른 개발자들을 위한 설명이나 시그널을 남겨 놓는다.



        강제 형변환

        1. 문자열

        1+"2" // '12'
        1-'1' // 0
        1*'10' // 10

        String(1) // "1"
        String(NaN) // "NaN"

        2. 숫자형
        Number('0') // 0
        parseInt('0') // 0

        3. 불리언형 - 값이 있는가 없는가 파악하는 것
        Boolean(1) // true
        Boolean(undefined) // false
        Boolean(Nan) // false
        Boolean('') // false
        Boolean('false') // true   문자열 false
        Boolean(null) // false  비어있는 상태

1
        '' / undefined / null // false  값이 비어있는지 확인할 때 쓰는 것(조건식)

        Boolean({}) //  true
        Boolean([]) //  true

    ---------------------------------------------------------------------------------

    *** Object (객체)       매우 중요!!!!!!!!!!!!!!!!!!!!!  프론트엔드 코테에서 제일 자주 제일 어렵게 나오는 주제

        자바스크립트는 객체기반의 스크립트 언어이며 사실상 자바스크립트를 이루고 있는
        모든 것이라고 해도 무방, 원시 타입 외에 데이터는 모두 object이기 때문이다.

        자바스크립트의 객체는
        키와 값으로 구성된 속성들의 집합

        키
        집합에서 특정한 값을 찾기 위해 다른 값들과 비교되는 값 (유일)

        프로퍼티
        키로 이름을 구별하고 해당 키의 값으로 구성되어있다.
        ex)
            <input placeholder = "비밀번호를 입력해주세요" />
            input 태그의 프로퍼티 / placeholder = 키 / 비밀번호를 입력해주세요 = 값

        선언 방법
            let seongyong = {
                name: "김성용",
                age: '20',
                height: 190
            }


            let obj = new Object() // (x) 

        접근 방법
            (1) 마침표 표기법
                console.log(seongyong.name) 
                // '김성용'

            (2) 대괄호 표기법
                console.log(seongyong["name"]) // "김성용"


                    // 객체의 모든 키 값에 접근
                    ex) for (let key in seognyong){
                        console.log(seongyong[key])
                    }

        * 객체는 왜 중요할까요?
            원시데이터가 아닌 모든 데이터는 객체이다.

            1. 여러데이터를 공통된 주제로 묶을 수 있다.
                let kong = {
                    animal: "dog",
                    age: 11
                }


            2. JSON (Javasciprt Obejct Notation)

                    1. 자바스크립트에서 객체를 만들 때 사용하는 표현식
                    2. 데이터를 전송하거나 저장할 때 많이 사용되는 경량의 교환 방식
                
                {
                    id: 1,
                    title: "오늘은 좋은 하루입니다",
                    User: {
                        name: "김성용",
                        profie_img: "https://이미지저장소.com/profile/seongyong"
                    },
                    CreatedAt: 2023.03.19,
                    Content: "여러분들 오늘 하루도 고생 많으셨습니다",
                    Comments: [
                        {
                            content: "강사님도 고생 많으셨습니다",
                            User: {
                                name: "지형님",
                                profile ...
                            }
                        },
                        {
                            ...
                        },
                        {
                            ...
                        },
                    ]
                }

                - 게시판 데이터 - 백엔드에서 받는것 -> 사용자 화면에 보여줘야하는 것(우리가 해야할 일)