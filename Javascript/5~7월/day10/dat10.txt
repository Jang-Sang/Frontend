
 배열 객체는 왜 const로 만들었는데도? 값 수정이 가능할까요?

 자바스크립트의 메모리 저장 방식

 힙 : 객체의 값 할당이 이루어지는 곳
 콜 스택 : 힙에 저장된 객체를 참조하여 호출된 함수의 정보를 저장하고 실행하는 곳


 힙에는 객체가 저장
 콜스택에는 원시 타입 저장

 1. 원시 타입 데이터 저장 방식
 - 콜스택에 값이 바로 저장
 - 렉시컬환경에 메모리 주소값이 저장

 2. 참조 타입 데이터 저장 방식
- 배열, 객체, 함수 등은 참조 타입이므로 메모리 힙에 저장
- 참조 타입은은 데이터가 저장된 메모리의 주소를 콜스텍에 저장
- 변수에는 객체의 값이 아닌 객체가 저장된 힙의 주소값이 저장

 ex)

 let a = 5;
 let b = {};

--------------------------------------------------------

 const b = {
    name: "김성용"
 }
 b.name = "오현우님"  --- o


 b = {
    name: "오현우님"  --- x
 }

--------------------------------------------------------

 얕은 복사
 값을 복사하여 할당 했을 때 같은 메모리 주소를 가리키는 값


 let obj = {
    name: "김성용"
 }
 let obj2 = obj

 obj.name = "윤승빈님"
 console.log(obj2.name) // 승빈님


 깊은 복사
 얕은 복사와 달리 주소를 복사하여 공유하는 것이 아니라 아예 새로운 값을 메모리에 저장하고
 해당 주소를 가리키는 것

 let obj = {
    name: "김성용"
 }
 let obj2 = {...obj}

 obj.name ="윤승빈님"
 console.log(obj2.name) // 김성용
 console.log(obj.name) // 승빈님

 ------------------------------------------------------

 빌트인 객체

 Number
    Number.MAX_VALUE // 자바스크립트 내에서 사용할 수 있는 가장 큰 수
    Number.MIN_VALUE // 가장 작은 수
    Number.isFinit() // 유한수인지
    Number.toString() // 숫자를 문자열로 바꾸어줌

 Math
    * Math.min(1,2,3) // 최솟값
    * Math.max(1,2,3) // 최댓값
    * Math.random() // 0~1 사이의 무작위 숫자 반환(소수형)
    * Math.round() // 소수점 첫번째 자리에서 반올림
    * Math.floor() // 소수점 이하 버림
    * Math.ceil() // 소수점 이하 올림
    * Meth.abs() // 절대값
    Math.sqrt() // 제곱근
    Math.cbrt() // 세제곱근
    Math.log() // 자연로그
    ..
    Math.pow, Math.log2(), Math.PI ...

 String
    String.length() // 문자열 길이 

    String.charAt(indx) // 해당 인덱스 문자 누구인지
           concat("문자열") // 합치는 것
           indexOf("문자") // 현재 문자의 인덱스 위치
           replace(문자, 대체할 문자) // 대체

   ex) "Hello".replace("e", "o") // Hollo
              .replace(정규표헌식, 대체할 문자)


            .toLowerCase() // 소문자
            .toUpperCase() // 대문자
            .split() // 나누는 것
            .repeat(n) // n번 만큼 문자열 반복

    ex) *.repeat(4) // **** 

 Date
    new Date()
    // 현재 날짜와 시간을 가지고 오는 인스턴스
    // * 로컬 환경 컴퓨터 시간
    // 로컬 환경이아닌 서버 환경으로 가지고 올 수 있는 라이브러리 momentJs, dayJs, luxon
    // unix 1970.01.01 --> 얼마나 지났는지 계산하는 방법 (초 단위)
    
    const date = new Date() 
    console.log(date) // Thu May 16 2022 17:16:13 ... (한국 표준시)
    

------------------------------------------------------

나머지 매개변수

------------------------------------------------------

정규 표현식

------------------------------------------------------

삼항연산자

------------------------------------------------------

new Map

------------------------------------------------------

Set

------------------------------------------------------

구조분해할당

------------------------------------------------------

+ front-end (4시간)
promise
asyc await
setTimeout, interval
ajax, fetch, axios

+ 이벤트루프/실행컨텍스트/클로저 (2시간)

------------------------------------------------------
