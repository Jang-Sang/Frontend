
JS (Java Script)

1996년 3월 (10일)

"html, css"은 정적이다. ==> 페이지가 동적으로 움직이지 않았음 => 페이지를 움직이게 만들고 싶다. -> JavaScript (가벼운 언어)
10일만에 만들어진 동작만을 위한 가벼운 언어였다.

성능이 되게 저하되어있었음 <---- google이 진화시켰다
2009년 v8 엔진(브라우저 엔진) 출시

JavasScript 인터프리터 언어
    => 변환 과정 없이 소스 코드를 바로 실행할 수 있도록 프로그래밍 언어 ex) js. python


v8엔진
    java script를 필요에 따라 컴파일 할 수 있도록 성능을 높이는 엔진
     - Java Script의 기능과 확장성이 넓어짐

    * 컴파일 언어
        A라는 언어 -> B라는 언어 변환하는 과정
        ex) java ,C#, swift ... 

        안녕하세요 -> 기계어로 컴파일 -> 000100101011001010001

===============================================================================================================

* Java Script !== Java
    Mocha -- > Live Script ---> Java의 이름을 빌려서 JavaScript가 된 것 뿐

==============================================================================================================

 Java Script 적용법

 -내부-
    html 태그 안에
    <script>
        ... Java script
    </script>

    단, 위치와 순서는 중요 
    자바스크립트는 위에서 아래로 읽음, 따라서 선언 되어있지 않은 값이나 DOM(요소)를 가지고 오면 찾을 수 없다


 -외부-
    *.js (확장자명은 js)
    <script src="경로" /> 
 
==============================================================================================================

 자바스크립트 입출력

    * 입력 -> 연산 -> 출력

    언제나 코드를 설계해야한다!! 그 후에 구현을 해야한다.

    복습한 것을 가지고 나만의 설계를 만들어야한다.


    구글링
        쇼핑몰 만드는 사이드 프로젝트
        쇼핑몰 만드는 법 (x)
        low - level의 알고리즘 단위 검색 (o)


    출력 값은 이미 알고 있는 값
    출력을 토대로 입력 값을 일부 에상
    연산을 하기 전 먼저 설계를 완료하라 ----> 구현 가능한지 검증
    설계가 완료되면 코드를 작성한다
    예외 상황을 예상한다. (오류 예측)



    1. 입력
        prompt()

    2. * 출력 -- 디버깅 !!!!
        console.log()
        console.error()

        -알림창 (사용자에게 보여주기 위한 용도)-
        -반드시 broweser 환경에서만 작동해야한다-

        중간중간에 console을 찍어봐서 원하는대로 작동하는지 확인해봐야 한다.
        에러를 줄이는 연습을 해야한다!!

        alert()
        confirm()

==============================================================================================================

    자바스크립트가 브라우저 내에서 작동해야한다는 건

        alert ,confirm과 같이 브라우저 내부 기능을 사용할 때
        DOM API (요소나 태그)에 접근해야할 때

    .js 확장자를 터미널로 직접 실행 (브라우저x)

        NodeJS 설치
            크롬의 V8엔진을 브라우저 바깥으로 꺼내어 JS를 브라우저가 아닌 환경에서도
            실행시킬 수 있도록 하는 런타임(환경)

            이로 인해 개발자들은 JS로 웹서버를 구성하여 백엔드를 만들 수 있고
            프론트엔드 프레임워크 개발도 가능

            reactJS와 같은 js 라이브러리들이 이 nodeJS 환경에서 실행
            https://nodejs.org/ko/

            설치 -> 확인 (node -v)
       
=============================================================================================================

    자바스크립트의 자료형  

            컴퓨터에서 어떠한 값을 사용하려고 하면
            컴퓨터에게 값을 기억 시킬 필요가 있다.

            예를 들면
            나는 a라는 바구니에 숫자 5를 담아놓을거야 (선언 및 할당)
            그리고 어디서든 a라는 이름을 사용하면 숫자5가 나오도록 할거야

            이러한 과정에서 a라는 바구니는 변수라고 부르며
            이 때 a의 자료형은 NUMBER이며 숫자 외에는 들어갈 수 없어야합니다.

            그러나, 자바스크립트에서는
            이러한 과정을 런타임(실행) 이후 판단하기 때문에
            자료형은 존재하지만 어떠한 값이든 변수에 담을 수 있습니다.

            자바스크립트는 동적타입언어이다.

            실행시 타입을 확정시키는건 편하지만 예상치 못하는 오류를 발생시킬 수 있다.

            ex)

                Java (정적 타입 언어)
                    int a =5; // number
                    int a = "성용" // number --> string (x)

                JavaScript (동적 타입 언어)
                    let(var) a =5; // number
                    let a = "성용" // string
                    실행시 마음대로 바뀔 수 있다.

                TypeScript 
                    let a:number = 5;
                    타입을 확정시킨다. 그 후에 실행

---------------------------------------------------------------------------------------

    자료형(단위)의 종류

        * 원시 타입
            number (숫자, 정수 실수를 구분하지 않습니다)
            string (문자열 ex. '안녕하세요') "5" , 5
            boolean (true , false)
            null (값이 명확히 비어있다고 지정해준 상태 )
            let a = null;

            undefined (값이 지정되어있지 않은 상태)
            let a;

            symbol (이터러블 오브젝트의 키[key] 값으로 사용되는 타입)


        * 객체 타입

            object : 객체 [집단] - 이거 하나만 있다고 알고있으면 된다.

            자바스크립트를 이루고 있는 원시값을 제외한 모든 것은 객체입니다.
            자바스크립트에 배열과 map, set의 경우는 모두 눈속임에 불과

        
        * 저장 공간이 다르다 - 면접에서 굉장히 많이 나온다.

             원시타입은 콜스택(Call Stack)  (자바스크립트 메모리 공간)
             객체타입은 힙(Heap) (주소 값을 참조하기위 해서 주소값을 변수에 할당)

             깊은 복사와 얕은 복사의 차이!!

             ex) let seongyong = {
                    age: 20,
                    height: 198
                }

                에러날시 콘솔찍어서 왜 에러가 났는지 확인하고 해결해야한다.
                반드시 콘솔 찍어볼것
                오류나면 반드시 디버깅 먼저 할 것


    --------------------------------------------------------------------------------

    변수
        var(x), let ,const

            1. 자바스크립트에서 변수를 선얼 할 때 자료형을 필요로 하지는 않습니다
               자바스크립트는 인터프리터 언어로 기계어로 컴파일 x
               따라서 실행 되었을 때 자료형을 추론하여 부여

            
            2. console.log("안녕하세요") // 안녕하세요
               console.log("안녕하세요")
               console.log("안녕하세요")
               console.log("안녕하세요")

               ex) let a = "안녕하세요"
            
                   console.log(a) // 안녕하세요
                   console.log("a") // a
                
               변수/상수를 선언하는 이유는
               알아보기 쉽다.

               컴퓨터에게 값을 기억시키고 재사용할 수 있다

            3. 변수(상수)의 선언 방법

                let 변수명; (선언) ----> undefined -> 콜스택이라는 곳에 쌓인다.
                변수명 = 5; (할당)

                ==> let 변수명 = 5; (선언과 할당을 동시에 했다)


            4. 변수의 종류

                * 변수 (변하는 값)
                    ex)
                        let a = 5;
                        console.log(a) // 5
                        a = 6; (o) ---------- 재할당
                        console.log(a) // 6

                
                * 상수 (항상 같은 값)
                    ex)
                        const a = 5;
                        console.log(a)
                        a = 6; (error)
                        console.log(a)

            5. var의 문제점

                중복 선언이 가능
                    let a = 5; -- > a = 6
                    let a = 6; ----------- error (a는 이미 정의되어있어요)

                    var b = 5;
                    var b = 6;



                호이스팅
                    자바스크립트 실행 이전에 평가과정에서 선언부를 먼저 저장
                    var의 경우는 선언부가 먼저 저장되어 실행시 선언되지 않아도
                    undefined라는 값을 갖고있고 이러한 현상이 

                    마치 선언부가 상단에 올라오는 효과 같다고해서
                    개발자들 사이에서 이를 호이스팅이라고 부르기 시작한 것

                    ex)
                        console.log(a) // error, 선언도 안되었는데 왜 사용해?
                                    // undefined

                        var a = 5;
                        console.log(a); // 5


                    이러한 점은 개발자들이 개발에 있어 혼동을 느낄 수 있음
                    이러한 점을 어떻게 개선할 수 있을까? ES6 (ES2015)
                                                       EcmaScript

                    이 이후에는 let과 const를 만들어
                    중복선언 및 호이스팅을 개선하였다.
                    (error)    (error)
                    간단 요약 : let과 const는 중복선언과 선언전에 사용불가
                    
                    이 두가지 이유로 더이상 var는 사용하지 않는다.
                    만약에 코드에 var이 사용되어있다면 구글링해서 옛날 코드를 긁어온 것
                    그러므로 사용하면 안된다.

                    최신기능이라고 쓸 수 없는 이유는
                    모든 브라우저에 지원되어야(실무에 사용가능해야)
                    사용가능하다.   
    --------------------------------------------------------------------------------

                








 


