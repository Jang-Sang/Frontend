3기 멘토링 - 1. 취업적 도움 / 이력서, 모의 면접 등
            2. 신규 스킬 개발
            3. 사이드 프로젝트
            최우선 - 열심히 하기
            대학이나 스펙은 코딩실력에 상관이 없다.

경력 기술서에 제일 좋은 것 - 내가 했던 이 아이템을 어떻게 개선했다라는 걸 보여주는 것



    1. 조건문
            특정한 조건이 주어지고 그 조건의 평가(참,거짓 [논리연산자, 비교연산자])에 따라 결과가
            달라지는 명령문

                (1) if .. else
                    if --> 만약에
                    범위가 지정되어 있고, 조건이 1개이면 보통 if문을 사용

                ex) 

                let a = 4
                if(a === 5) {
                    // 조건식이 참이면 실행할 문장
                    ++a

                  아니면
                } else {
                    // 조건식이 거짓이면 실행할 문장
                    --a
                }

                ----------------------------------

                if(조건식1){
                    ...1
                    조건식이 1이 참이면 실행
                } else if(조건식2){
                    ...
                    조건식이 2가 참이면 실행
                } else {
                    ...
                    그 외의 경우 실행
                    (조건식1과 조건식2 거짓일 경우)
                }

            참일때 실행할 명령과 거짓일때 실행할 명령을 나누는 것 - 분기점을 나눈다
            분기점을 나누는 이유 - 데이터 처리를 다방면으로 할 수 있다.
                                    ** 예외처리를 하기 위해서
                                            예외처리란 - 가정한 상황에서 제외되는 상황을 return 시켜주는 것 
                                                        결과값의 다양한 결과를 기대할 수 있다.
                                                        error상황이나 오류 처리를 위해서 사용한다.
            보통 분기점 or 예외처리를 위해서 사용한다고 한다.


         2) switch
                조건의 일치나 불일치를 따지는게 아닌 변수의 값을 기준으로 일치하는 문장 실행

                switch(기준으로 삼을 변수명){
                    case 값1:
                        변수가 값1과 일치하면 실행할 명령;
                    case 값2:
                        변수가 값2와 일치하면 실행함 명령;
                    default:
                        기본값;
                }

                case는 무제한으로 들어갈 수 있다.
                default는 case에 일치하는 값이 없을때 실행 할 명령
                
        ------------------------------------------------------------------------------

        2. 반복문
            주어진 조건식이 결과가 참일 때까지 {}(블럭) 내의 명령문을 반복 실행하는 구문

            1) for -- 가족 (forEach, for...in, for...of)

                ex)
                for(초기화식; 조건식; 증감식;) {
                    ... 조건식이 참인 경우 실행할 문장
                }

                for(let i=0; i<10, i++){
                    console.log(i)
                }
                // 0~9

                for(;;){
                    console.log("a")
                }
                // 무한 루프
                // 이걸 하는 순간 내 컴퓨터는 죽는다. 그니까 절대 하지 말 것!!!!
                // 거의 디도스 공격이랑 비슷한 방식이다.


            2) while문
                ()안에 조건식이 true일 동안 실행할 문장

                ex)
                    while(조건식){
                        조건식이 true일 때 실행할 문장
                    }

                    let num = 5;

                    while(true){
                        console.log(num);
                        --num;   //4,3,2,1
                        if(num === 0) break;
                        // 무한 루프에 대한 탈출
                    }

                    while(num<10){
                        num++; -- 이 연산자를 하고 더하겠다는 것 전위연산자
                        console.log(num);
                        // 5,6,7,8,9
                        ++num;
                        console.log(num); 먼저 더하고 연산자를 실행한다 후위연산자
                        // 6,7,8,9,10
                    }

                    do ... while 
                        while 문과 기능은 같지만 조건식이 false라 할지라도 "무조건 한 번"은 실행하고 반복

                        let count = 3;
                        do {
                            console.log(count);
                        } while (count < 3)

                    while, do...while문은 소프트웨어 단위에서는 거의 보기힘들거나 아예 사용하지 않는다. 그러므로 이건 잊는다.    


언제나 능동적인 자세가 중요
내일로 - 딥한 것들 -포럼 등등
