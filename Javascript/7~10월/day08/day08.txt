-------------------------------------------------------------------------------------------------------

    addEventListener

        자바스크립트에서 가장 권장되는 이벤트 등록 방식
        하나의 요소에 여러개의 이벤트를 등록할 수 있다는 장점
                                     ------ 사용자의 행위

        ex)
        Dom || window.addEventListener("이벤트명", 콜백함수, options)

        document.getElementById("user-name").addEventListener('click', ()=>{ console.log("클릭되었습니다")} )
       
        
        자주 사용하는 이벤트명

        - document -
        click : 요소를 클릭했을 때
        mouseover : 요소에 마우스를 올렸을 때
        mouseleave : 요소에서 마우스가 떠났을 때
        mousedown : 요소를 누르고 마우스를 아직 때기 이전인 상태
        mouseup : 요소를 누르고 마우스를 땐 상태
        mousewheel : 마우스 휠이 이동되었을 때
        mousemove : 마우스가 움직일 때 마다
        
        - input -
        focus : 폼 요소의 입력 요소가 활성화 되어있을 때
        blur : 포커스에서 벗어났을 때
        change : 폼 요소의 입력 요소의 값이 변경되었을 때
        keypress : 키를 처음 누른 순간
        keyup : 키를 눌렀따가 땐 순간
        keydown : 키를 누르고 때기 이전일 때
        submit : form 태그와 같이 사용, form이 제출되었을 때
       
        - widnow, body - 가장 최상위 브라우저
        load - 웹 페이지가 로드 되었을 때
        * resize - 웹 페이지의 사이즈가 조정 되었을 때
        scroll - 스크롤바의 움직임이 생겼을 때
        unload - 웹 페이지가 닫혔을 때

------------------------------------------------------------------------------------------------------------

    캡쳐링, 버블링

    버블링
        한 요소에 이벤트가 발생되면, 이어서 부모 요소의 이벤트 콜백함수 역시 동작
        => 하위 요소의 이벤트가 부모 요소의 이벤트로 전파


    캡쳐링
        버블링과는 반대, 부모 요소를 클릭했을 때 하위 요소로 이벤트가 전파되는 것
        캡쳐링의 기본 옵션은 false
        addEventListener의 options 인자로 t/f를 변동 가능

        ex)
        el.addEventListener('click', function(){}, true)


------------------------------------------------------------------------------------------------------------


    이벤트 전파 방지

--------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------

classList

    해당 요소가 가지고 있는 클래스의 목록을 나타내는 DOM properties

    <div class="seongyong on add flex"/>

    document.getElementsByClassName("seongyong").classList
    // seongyong on add flex

    classList.contain("on")
        해당 클래스가 있는지 없는지 여부를 판단하여 boolean 형태로 반환
 
    classList.add("class")
        해당 요소에 인자로 전달된 클래스를 DOM에 추가

    classList.remove("class")
        해당 요소에 인자로 전달된 클래스를 DOM에서 제거

    ex)
        <div class="tab" />
        <div class="tab" />
        <div class="tab on" />
        <div class="tab" />
        <div class="tab" />


        const tabs = document.querySelectorAll(".tab")

        tabs.forEach((el)=>{
            el.addEventListener('click', (e)=>{
                console.log(e)
                const selectTab = e.target;
                selectTab.classList.add('on')
            })
        })

        ** this (이거, 자기 자신)
            자바스크립의 this는 동적으로 바인딩(결정) 되며
            => 누가 this를 불렀는가에 따라서 값이 바뀐다

        addEventListener의 this는 이벤트 자체를 불러옵니다.
        따라서 이벤트가 일어난 대상을 찾기위해선 e.target을 통해 명확한 요소를 불러올 수 있음

------------------------------------------------------------------------------------------------------------

    attribute(속성)
        setAttribute("속성명", 속성값) - 설정
        getAttribute("속성명") - 속성 값의 조회
        removeAttribute("속성명") - 삭제
