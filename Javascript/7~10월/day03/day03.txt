변수 : let
상수 : const
데이터 타입 : 원시타입(string, number, boolen...), 객체타입(객체,배열)
제어문 : 조건문(if, switch), 반복문(for, while)

함수 (Function)

    자바스크립트는 함수 지향형 프로그래밍

    프로그래밍 패러다임이란?
        개발자에게 프로그래머로서 특별한 관점을 갖게 하고 해당 관점에 따라 코드 작성 방식을 결정하는 역할 => 개발 방법

    명령형
        절차 지향 : 순서를 중요 -> 컴퓨터의 처리구조와 유사, 속도가 빠름(C언어) - 치명적인 단점 : 무조건 순서대로 진행,수정해야 된다. 앞에 작업 수정시 뒤에 작업도 수정해야 된다. 유지보수가 빡셈
                c언어 - 저급언어 - 수준이 낮다는게 아닌 레벨이 낮은 것
        객체 지향 : 각 프로그램 구조에서 오류가 있을 시 그 오류가 있는 곳만 수정해서 사용하는 것. 객체(집단)의 상호 작용을 중시, 유지 보수 용이 - Java, C++, C#
                a,b,c가 있는 와중에 a가 고장나면 a만 수정하면 되는 것 그래도 a,b,c가 서로 소통하기 때문에 순서는 중요하다.

    선언형
        함수 지향 : 순수 함수를 조합하고 프로그래밍하는 방식 - JavaScript        

    이 구분도 옛날 이야기 요즘엔 객체지향과 함수지향의 경계선이 모호하다.  
    현재는 각 패러다임의 장점을 살려서 개발  
    그러므로 크게 구분짓는 것은 의미가 없다.
    자바스크립트를 좀더 객체 지향화 시킨것이 타입스크립트다.

---------------------------------------------------------------------------------

    함수 지향 프로그래밍 관련 용어 - 난이도 자체가 어려워서 일단 개념 암기용으로 암기해둘 것
    자바스크립트를 보다 자바스크립트 답게 사용하고 싶으면 매우 중요한 개념
     추천 저서 = 쏙쏙 들어오는 함수형 코딩(구매 완) - 매우 어려움 딥다이브 완성 후 공부하기

    불변성 = 함수 밖에서 데이터의 변형을 일으켜서는 안된다
    클로저 = 부모 함수가 실행 종료되어도 참조할 수 있는 내부 함수 및 값은 기억된다
    순수함수 = 입력 값에만 의존하고 부수 ㅛ과는 연산에 영향을 미치지 않는다
    일급 객체 함수 = 함수를 입력값으로 사용할 수 있도록 반환 값으로도 사용할 수 있다
    유지관리가능성 = 외부 효과에 의존되지 않으며 해당 부분만 수정하면 되기에 유지보수가 용이하다

    모듈화 = 함수를 분리하여 재사용 및 관리가 용이하도록 구성해야한다
    부수효과 = 함수 밖에서 함수의 연산에 영향을 끼치면 안된다(외부효과, 사이드 이펙트)
    참조 투명성 = 동일한 값에는 항상 동일한 반환 값

---------------------------------------------------------------------------------------
    객체지향에 관심이 있으면 반드시 공부 따로 할 것!!( 추후 정리하기 )
    코드 제대로 짤려면 필수 

    특징
        캡슐화
        상속
        추상화

    원칙
        solid
        단일 책임 원칙
        개방 폐쇄 원칙
        리스코프 치환 원칙
        인터페이스 분리 원칙
        의존성 역천 원칙

---------------------------------------------------------------------------------------------------

    함수
        어떠한 기능을 만든다. a,b(input) => +(opertage) => a+b(output)
                                2가지 수 => 합치기 =>  합친 결과값

        ex)
            나는 두개의 숫자를 전달받고
            두 수를 합치는 함수(기능)을 작성하고 싶다

            function addNumber(a,b){
                return a+b
            }

            자바에서는 메서드라고 부른다.

        선언부
            - 선언부는 함수를 실행하는 것이 아니라 기능만 구성하여 컴퓨터에게 기억시키는 것 -> 재사용시키기 위해서
            - 나는 언젠가 이 기능을 사용할 수 있어!!
            
            function 함수명(파라미터1,2,3,...)  - 변수와 이름이 같아야된다. 다르면 알아보기 힘들거나 작동을 안할 수 있음. 항상 유추 가능할 수 있게 작성    
                           파라미터란 ----------------- 실행부에서 전달된 값, 매개변수, 파람, 인자 - 모두 같은 말이다.
            {
                하나의 구역을 만들어주고 
                .... 연산
                반환 값(생략 가능)
            }

        실행부
            함수명(5, 3)
            함수명(전달값1, 전달값2)

        반환값
            function sum(a,b) {  <-------------선언
                console.log(a+b)
            }    

            const result = sum(3, 5) <-------실행 //8
            console.log(result)  //undefined ------------> 8

            *   반환 값은 해당 함수에 실행부에 값을 부여한다는 의미 sum(3, 5) = 8
                반환을 생략하면 sum(3, 5)는 기능은 실행하지만 자체가 갖는 값은 없습니다.

                따라서 함수의 기능을 통해 나온 결과값을 함수 외부에서 사용하고 싶을 때
                함수에 값을 반환해서 외부에서 사용할 수 있도록 return 

                외부에서 사용하고 싶으면 function으로 호출
                내부에서 사용만 할려면 return으로 반환

                판단은 언제나 내가하는 것 남이 하는 것을 따라하기만하면 오래걸리거나 이해도 못한다.

-------------------------------------------------------------------------------------------

    기명함수, 익명함수

        function hello(){
            console.log("hello")
        }
        기명함수 - hello라는 이름만 가지고 어디서든 재사용할 수 있고 파악할 수 있게 하는 것

        function (){
            console.log("world")
        }
        익명함수 - 재사용 가능성이 없을 때 굳이 이름을 주지 않고 사용 - 일회성으로 사용할 때 사용
                - 하지만 이름이 없으면 실행부 호출X, 콜백 함수나 클로저, 즉시실행함수로 호출


    재귀함수
        함수 안에서 동일한 함수를 실행(반복)
        [코딩테스트, 최단 경로, 깊이 탐색 관련 알고리즘의 단골] - 실무에서는 사용하는 경우는 그렇게 많지는 않다.

        function f(n){
            if(n <= 1){
                return 1
            }
            return n + f(n-1)
        }            
        f(10) - 10부터 1까지 더하는 함수 - 알고리즘용 

---------------------------------------------------------------------------------------------------

    즉시실행함수
        실행부 없이 선어부만으로 바로 실행되는 함수
        바로 실행되기 때문에 익명 함수로 실행하는 것이 보통

        괄호 두개 열어준다. 첫번째 괄호에 함수 정의
        ()() => (func)()

        (function(){
            ... 실행문
        })()

    화살표 함수
        ES6,7 function 키워드 대신 화살표(=>)를 사용하여 보다 간략한 방법으로 함수 선언
        this 바인딩의 차이가 존재하므로 메서드 용도로는 사용하지 않는다.

        ex)
        기명함수 표기
            function a (param1, param2){
                ...
            }    

            const a = (param1, param2) => {
                ...
            }

        익명함수 표기
            function(){

            }

            () => {

            }

객체