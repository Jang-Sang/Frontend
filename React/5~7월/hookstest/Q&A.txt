Q1. 리액트를 사용하는 이유를 설명해보세요 (2가지 이상)
    - 재사용 가능한 UI 구성 요소를 만들 수 있습니다. Components
    - 페이지 전체를 렌더링 하지 않고 렌더링이 필요한 부분만 렌더링 할 수 있습니다. Virtual DOM
    

Q2. (Q1)을 통해 얻을 수 있는 장점은 무엇일까요?
    - 재사용이 용이하고 유지보수에 효율적
    - state(상태)의 변화를 react에서 감지하고 있으며 state의 변화가 생긴다면
      해당 state를 가지고 있는 Components의 가상 돔과 실제 돔을 비교하여 변화가 생긴 Components만 리랜더링


Q3. 리액트가 가상 돔을 사용하는 이유는 무엇일까요?
    - 불필요한 렌더링 과정을 최소화하기 위해서
    - 변화를 한 해당 state를 가지고 있는 Components의 가상 돔과 실제 돔을 비교하여 변화가 생긴 Components만 리랜더링
    - 개발자의 수고를 줄이기 위해서 

Q4. 리액트가 가상 돔과 돔 트리를 비교하여 바뀐 부분이 있다면 화면을 다시 그리는 행위를 무엇이라 할까요?
    - 리랜더(Re-render)


Q5. (Q3)의 행위를 통해 얻을 수 있는 이점은 무엇일까요?
    - 브라우저의 불필요한 렌더링 과정을 최소화해서 자원의 누수를 줄이고 개발자의 노동력적인 부분에서의 절약도 얻을 수 있다.


Q6. (Q3)은 리액트에서 어느 순간에 실현될까요?
    - 가상 돔과 실제 돔을 비교하여 Components에 변화가 생겼을 때

Q7. 훅 함수는 왜 만들게 되었을까요? 코드 재사용성을 위해서 만들어졌다.
    
    아래의 훅 함수는 각 언제 선언되어야 할까요?
    (1) useState - state의 값이 변화하면 해당 컴포넌트를 리랜더링
    (2) useRef - html(실제돔)의 요소에 접근하기 위해서도 사용
    (3) useEffect - 화면이 다시 리랜더링 되어도 연상 과정을 거치지 않고 해당 값을 재사용 때
    (4) useCallback - 가독성 + 성능을 위해 콜백함수를 유즈콜백으로 사용하는 경우
    (5) useMemo - 해당 배열 내부의 state 값 혹은 값이 변경되면 해당 이펙트(함수)를 재실행할 때

Q8. 커스텀 훅을 제작하면서 얻을 수 있는 이점은 무엇이고 어느 때 만들어야 할까요?
        - 코드, 로직의 간결해지고 가독성이 좋아진다
        - 필요없는 반복을 줄이고 재사용성을 높인다
        - 수정사항이 있을 시 커스텀 훅에서만 수정하면 되기 때문에 유지보수에 용이하다
        
        - 어느때 만들어야 하는가????


Q9. 리액트로 프로젝트를 만들려고할 때 고려해야하는 사항들을 아는대로 작성해보세요 (3가지 이상)
    - 유지보수성    
    - 확장성
    - 재사용성 

Q10. 만약 위의 질문에 모두 답을 했다면, 현재 부족한 것은 리액트가 아닌 자바스크립트 일 수 있습니다
    이전 풀어보았던 자바스크립트 API 문제 1~4와 board 문제를 현재 풀이할 수 있는지 확인해보세요
    
    react로 풀이를 한다고 가정했을 때와 (직접 바꿔보지는 말 것, 예제 문제와 유사)
    vanilla js(java script)로 풀이한다고 하였때 와의 차이점은 무엇일까요?

    * 위 문제를 받지 못한 수강생은 메일 전송 시 따로 첨부하여 송부

    - 추후 자바스크립트 문제 복습할 것
    -
    

Q11. 리액트에서 컴포넌트를 나누는 기준은 어떻게 되어야할까요?
     또한, 이러한 관점은 개발자마다 다를 수 있는데 왜 그럴까요?

     - 컴포넌트는 재사용이 가능한 최소 UI 단위 / 하지만 웹이 수행하는 역할에 따라 다양하게 나뉘어질 수 있다.
     - view, 로직, state등 다양한 기준으로 컴포넌트를 분리하기 때문에 개발자마다 다를 수 있다.
