사용자의 고유 id(pk)는 보안상 민감한 자료로, 백엔드에서 로그인 시 
유저 식별을 위해 해당 고유 값을 암호화하여 프론트엔에게 전달하고 프론트엔드는 해당 암호를
그 이후의 요청마다 실어서 백엔드에 전달, 백엔드는 키를 통해 복호화

암호화의 방법
1. session
백엔드에 user 고유값과 암호키를 매칭한 데이터를 보유하고 있는 것
프론트 --> 암호 --> 백엔드 (고유 id)

2. * jwt (json-web-token)
id를 암호화해서, 암호화한 통째로 프론트엔드 전달
프론트 ---> (토큰) ---> 백엔드(복호화)

3. refresh token
why? 세션이나 토큰이 만료되었을 때 사용자가 모르게 refresh 토큰을 갖고 있다면 재발급하여
로그인을 유지하기 위해 사용

------------------------------------------------------------------------

웹스토리지

local storage
    - 반영구적인 웹 저장소 -> 웹 사이트가 꺼져도 유지
    - key : value, value를 사용할 땐 모두 문자열로 반환
    - 비회원 장바구니

session storage
    - 생명주기가 있는 웹 저장소 -> 웹 사이트가 종료되면 같이 사라짐
    - ...

cookies
    - 보안적인 요소, http 통신을 통해, 백엔드와 프론트엔드 교류
    - session id(암호), refresh token 

차이
    - local session -> 보안 X, 다양한 데이터의 형태, 고용량 데이터(4mb, 5mb)
    영문자 1byte, 한글문자 3byte