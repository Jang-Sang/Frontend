
    webpack : CRA에 기본 설정으로 되어있는 모듈 번들러
        모듈 : 한 가지 이상의 기능을 분리한 코드의 집합, 분리한 코드 덩어리
        번들러 : 묶어주는 것

    너저분하게 분리되어있는 리소스들을 특정 카테고리나 묶음으로 묶어서 정리해주는 역할
    연산 시간이 줄어들어 랜더링 비용이 감소
    이거 없으면 리액트 없었다.

    * 장점 - 모듈단위의 개발이 가능
            네트워크 연산 비용 감소
            loader를 통해 js가 로드된다.

--------------------------------------------------------------------------------------------------

    babel (트랜스파일러)
        ES6 이후를 모던 자바스크립트

        최신 문법을 이해하지 못하는 웹 브라우저들이 존재
        해당 브러우저에 존재하는 로더가 문법을 이해할 수 있도록
        저레벨의 문법으로 트랜스파일(변환)하는 과정

        *react는 그 중 바벨의 4가지 모듈
        1. @babel/core : 핵심요소
        2. @babel/cli : 명령어를 통해 바벨을 사용할 수 있도록
        3. @babel/preset-env : 바벨의 기본적인 설정
        4. @babel/preset-react : 바벨이 JSX문법을 이해할 수 있도록

--------------------------------------------------------------------------------------------------------

    이 모든게 없어도 react를 javascript에서 돌아갈 수 있도록 할 수 있지만 webpack과 babel을 대체할 수 있는 것을 스스로 만들어야 한다.
    그러므로 webpack과 babel은 필수다.

    * 어떤 개발자인가요? (개발자로서의 가치관)
    - 일관성 / 내용의 통일성이 중요하다
    - 다른 사람을 이끌기보단 받쳐주는 사람 / 다른 사람의 작은 의견이라도 무시하지 않고 한번이라도 고려해보는

-----------------------------------------------------------------------------------------------------------

    리엑트의 폴더 구조

    1. Container/Presentational 폴더 구조
        - 예전에 많이 사용하던 폴더 구조
        - Dan Abramov(리덕스의 창시자, 리엑트 개발 참여자)이 처음 고안
        - 이 패턴은 2019년 훅함수의 등장 이후로 더 이상 사용하지 말라고 언급

        pages
            board
                container.js (logic)
                Presenter.js (view)

    * 2. Hooks 폴더 구조 - 최근에 제일 많이 사용되는 방식. 전체의 90%는 사용된다

        components --- 모든 페이지에서 사용될 수 있는 컴포넌트(조각)  재사용되도 쪼개도 좋고, 재사용이 안되더라도 쪼개도 좋다.         
        hooks --- 훅함수 (재사용되는 비즈니스 로직)
        pages
            boarder
                hooks --- boarder 내에서 재사용되는 훅함수
                coponents --- boarder내에서 사용될 수 있는 컴포넌트 (조각)

    3. Atomic 패턴 - 대부분의 개발자들이 싫어하지만 종종 적용되는 경우가 있음

        가장 작은 단위의 컴포넌트를 설계하여 재사용이 용이하게 하는 패턴
        Atomic을 따르기 위해서는 디자이너와 협업되어 최대한 재사용이 용이하게 진행

        atoms -- 더이상 쪼갤 수 없는 컴포넌트
        molecules -- 여러개의 atom이 모여 하나의 목적성 있는 컴포넌트
        organisms -- 여러개의 molecules이 모여 하나의 기능이 가능한 UI를 제공할 수 있는 인터페이스
        templates -- 레이아웃과 비슷, 프레임
        pages -- organisms들이 합쳐져 하나의 최종 컨텐츠

        회사마다 가치관과 사용기술이 다르기 때문에 그때 그때 맞춰서 사용하면 된다.

---------------------------------------------------------------------------------------------

    react-router-dom

        router : 네트워크 데이터 전송 (소포)

        => react에서 dom을 전달하기 위해 사용하는 소포 (주소에 따른 보여줄 DOM 설정에 관한 라이브러리)

        => SPA에 최적화

        npm i react-router-dom 

        react-routerdom 깃허브에 많은 자료가 있다
        공식문서에도 많은 예제와 기본 개념이 있다.
        (1순위 찾아볼 곳)

----------------------------------------------------------------------------------------------    

    todoList 폴더 구조 - 폴더의 이름은 무엇이라도 바꿀 수 있다. 이름에 집착 금지!!

    src
        components
            Button
                Button.js
            Layout - 공용 사용이라 바깥에 빼도 상관없고 넣어도 상관없음
                Footer
                    Footer.js  
                Header
                    Header.js
                Layout.js 
        pages
            Home
                components
                    SignForm.js 
                    LoginForm.js 
                Home.js(index.js 가독성을 위해서 폴더명이랑 일치시켜두는 경우도 있다.)  -- 인덱싱 가능한 페이지, 초기 렌더 파일, 엔트리 파일, 최초 시작점
            Todo 
                components
                    AddFormModal.js 
                    todoList.js 
                    OneTodo.js 
                index.js - 최종파일(우리가 볼 수 있는) 모든 컴포넌트를 모은 파일    
                index.js로도 사용하긴하지만 너무 많으면 폴더 관리하기 힘들기에 회사마다 컨벤션마다 다르다.
                index로 하면 좋은 점 : 파일을 따로 지정해두지 않아도 자동으로 default값으로 지정되어 있다.
                index보다 다른 파일로 지정하는게 효율상 아주 조금 더 좋지만 프론트엔드상에서는 차이를 못느끼고 막 몇십만개 파일을 관리하는 수준이 아닌 이상 차이를 느끼기 힘들지만 대형 회사같은 경우는 다르게 관리한다.
        routes                  
            routing.js - 라우팅해서 app.js에 전달 - 라우터와 연결되어 있다.
        styles     
            common.js -- 공용 css 
            global.js -- 전역 css 
            theme.js -- 디자인 코인 - 회사마다 각각의 브랜드 컬러를 가지고 있는 경우가 대다수여서 통합적으로 스타일을 관리하는 곳이 있다.
        App.js -index로 전달
        index.js -html로 전달

-------------------------------------------------------------------------------------------------------------------

    RTFM ("Read The Fucking Menual")
        - 언제나 가장 많은 정보는 공식 홈페이지에 있다. 그니까 공식 홈페이지를 읽어라.

    npm 관련 오류는 추천 명령어 입력시 80%는 해결가능
    git 관련 오류는 50%정도 해결가능 
    
        