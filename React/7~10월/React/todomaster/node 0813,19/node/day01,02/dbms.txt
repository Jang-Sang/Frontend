

 Data?
    의미가 있는(수집 할 수 있는) 최소 단위의 정보와 자료

    ex) 떡잎마을에 사는 5잘 남자아이 짱구님이 유튜브를 통해서 저녁 7시에 스테이크를 요리하는 영상을 봤다
    data? --------------------> (돈)
        사는 곳
        나이
        주제
        이름
        성별
        시간 대
        매체
        +

    알고리즘 - 맞춤광고


    Data === Assets
    데이터가 엄청나게 방대해짐 -> 구분, 분리, 관리 -> 관리할 수 있는 프로그램의 필요성

    DBMS(Database Management System) -> 데이터 관리해주는 도구(프로그램)
    base -> 기지, 군락, 집단 -> 데이터 덩어리(data-base)
    => oracle, mysql, mariadb, msql, postgresQL

    * mysql
    https://www.mysql.com/downloads/ -> 최하단 MySQL Community Downloads
    -> 4번째 MySQL Community Server

------------------------------------------------------------------------

    RDBMS (Relational DBMS) 
        관계형 DBMS
        모든 데이터를 2차원의 테이블(표)형태로 표현
        테이블끼리 서로 연관되어 관계를 지어줄 수 있기 때문에 데이터를 더 효율적으로 운용
        (ex. 이상현상(오류) 방지, cascading 상위 데이터삭제 - 하위 데이터 삭제 )

        스케일업(용량을 키운다) 코스트가 많이듭니다.

------------------------------------------------------------------------

 mysql 설치 마무리, 스키마(제약조건), 모델링 단계, CRUD(SQL)

------------------------------------------------------------------------

    스키마(제약조건)

        1. NOT NULL : null이 들어갈 수 없음 (required)
        2. UNIQUE : 중복된 값을 저장할 수 없음
        3. DEFAULT : 값이 들어가지 않았을 때 자동으로 저장될 값
        4. PK(Primary Key), FK(Foreign Key)
            --- 대표키          --- 외래키

            키
                기본키 (다른 데이터와 구분할 수 있는 값) - 슈퍼키(대표키) -> PK -> NOT NULL, UNIQUE 
                                                      - 후보키

                외래키 (다른 데이터 집군과 현재 데이터의 집군과의 관계) 1:N, 상품(상품번호, 가격) <--> 구매내역(누가, 언제, 수단)
                                                                            게시판 <--> 댓글

                                                                    N:M, 인스타 게시글 #ootd #coding #분좋카 <--> #ootd 

                                                                    1:1 -> 사용자(id,pw) <--> 사용자 정보(이름, 생년월일)                                      


                                                                    --> erd 

        5. AUTO_INCREMENT : 데이터를 넣지 않아도 수가 1부터 다음 데이터가 하나씩 증가되어있는 형태로 증가

------------------------------------------------------------------------

    모델링 단계

        개념 모델링
            추상적인 단계
            이 엔티티(테이블)에는 어떤 데이터가 될까?
            그리고 엔티티끼리 서로 관계는 어떻게 될까?

        논리 모델링
            제약 조건, 스키마, 추상적이었던 엔티티끼리의 관계나 스키마를 명확히

        물리 모델링 
            실제로 DBMS에 데이터를 추가할 수 있도록 형체화
            user_idx pk bigint default

        중복되는 데이터가 없어야하고, 이상(예외) 현상이 일어나지 않도록 더욱 꼼꼼히 만든다(정규화, 반정규화)    

------------------------------------------------------------------------

    SQL 
        DML : 데이터 조작어 (CRUD - inset, select, update, delete) -> data 
        DDL : 데이터 정의어 (table, database) -> table, database
        DCL : 데이터 제어어 (권한) -> DBMS에서 접근할 수 있는 계정 관리

        * TCL : 그룹, 롤백, 저장

        => SQL은 대소문자 구분이 없습니다.

------------------------------------------------------------------------

    DDL, DML

    DDL
        CREATE DATABASE 데이터베이스명; => 데이터베이스 생성
        USE DATABASE 데이터베이스명; => 데이터베이스 선택
        DROP DATABASE 데이터베이스명; => 데이터베이스 삭제

        CREATE TABLE 테이블명 => 테이블 생성
        DROP TABLE 테이블명 => 테이블 삭제
        ALTER 테이블 => 테이블 수정

    DML
        (조회)    
        select * from 테이블명 (전체 컬럼(열, 분류))
        select user_email from 테이블명 (특정 컬럼)
        select user_email from 테이블명 where user_name = "장상준"(특정 조건에 일치하는 특정 칼럼)

        (생성)
        inset into 테이블명 (user_email, user_name, ...)

        (갱신)
        update 테이블명 set user_email = "test2@test.com" where user_email = "test@test.com"

        (삭제)
        delete from 테이블명 where user_nickname = "장상준"

------------------------------------------------------------------------     

    순서
        1. 데이터베이스 생성 - 최초 1번만
        2. 데이터베이스 선택
        3. 테이블 생성 - 최초 1번만
        4. 데이터 조작어 (select, table)

------------------------------------------------------------------------       