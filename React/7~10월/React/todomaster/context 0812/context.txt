
    전역 상태 관리
    (global) --> 어떤 곳에서든 사용할 수 있는 상태

    어디서든 사용가능한 상태가 왜 필요할까?
        a(컴포넌트) - A(상태)
        |
        ---- props
        |
        b(컴포넌트) ---------> 징검다리가 되어야함 (props의 깊이가 깊어질 수록 상태에 관한 디버깅이 복잡해짐) -> 프롭스 드릴링 -> 해소 (전역 상태 관리)
        |
        ---- props
        |
        c(컴포넌트) - A(상태)


    어떠한 방식으로 이루어질까 ?
        1. Top to Bottom (flux)
                flux 패턴
                    페이스북에서 고안한 백엔드에서 View 로직을 관리하던 MVC패턴을 벗어나기 위한 단방향 패턴
                    MVC( Model, View, Controller)
                        백엔드에서 View와 관련된 로직도 관리, 어떠한 Model이나 어떤 Controller에서 에러가 났는지 발생하기 어려움

                model -> 백엔드에서 db와 연결된 부분
                controller -> 백엔드의 실제 로직
                view -> 화면

                action(데이터) -> dispatcher(매개체) -> model(store) -> view

                action -> 실제 데이터 객체 {}
                dispatcher는 action을 store에 전달하기 위한 이벤트 핸들러
                store는 실제 데이터가 저장되는 장소
                view는 화면, store에 저장된 데이터를 가져다가 사용함

    ------------------------------------------------------------------------------------------------------------

    React에서는 자체적으로 useContext hooks function -> DI(의존성 주입) -> 실무에서 굉장히 자주 사용
    -> 단점, 사용법이 불편함

    불편한 점을 보완한 상태 관리 라이브러리들의 등장
    1. redux
        - 채용시장에서 가장 많은 부분을 차지
        - 가장 빨리 망할 라이브러리 1위, 3~4년 전에 전성기
        - 이미 redux로 개발 된 프로젝트들이 존재, 유지보수를 위해서 익혀야함 (o)
        - 준비를 위한 코드가 엄청 길었음

    2. mobx
        - redux의 대체제, 간편하게 사용할 수 있는
        - 1년 정도 반짝 인기 좋았음, 간혹 사용하는 곳이 있지만, 찾기 어려움 (x)

    3. rtk
        - redux-tool-kit
        - redux가 자체적으로 단점을 보완하고 탄생시킨 최신 버전의 redux
        - 하지만 마찬가지로 별로 주목을 끌지 못했음
        - 실무에서는 redux를 rtk로 마이그레이션(변환)하여 사용하는 경우가 많음 (o)

    4. recoil
        - react에서 개발한 react만을 위한 상태관리 라이브러리 
        - 현재 가장 인기 있는 라이브러리 중 하나 
        - 스타트 업의 경우 실무에서 사용하는 빈도가 높음 (o)

    5. jotai, zustand
        - 현재 가장 성능이 좋고 평이 좋은 상태 관리 라이브러리
        - 이미 실무에서 많이 사용
        - jotai는 recoil 경량화 버전, zustand의 redux 경량화 버전 (시간부족 - x)

    --------------------------------------------------------------------------------------------------

    내일
        useReducer, useContext, reducerTodo(전역 상태화), 전역 상태를 통한 DI
    
    다음주
        redux, axiosTodo(백엔드 데이터 통신)
    
    --------------------------------------------------------------------------------------------------

    const a = { ----> "123"
        a: 1,
        b: 2,
        c: 3
    }
    
    const b = a ---> "123"
    const b = { ---> "456"
        ...a
    }

    const a = { ---> "123"
        a: 1,
        b: 2,
        c: { ---> "789"

        }
    }

    const b = { ---> "456"
        ...a
        c: { ---> "789" --> lodash, deepCopy (깊은복사)
           ...a.c (중첩 객체도 전개연산자)
        }
    }


        
    



        