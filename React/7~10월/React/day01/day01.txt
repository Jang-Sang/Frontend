    React? 
        복잡한 사용자 인터페이스를 쉽게 구축하기 위해서 메타에서 제작한 라이브러리
        라이브러리(도서관-코드 보관소, 이미 작성된 오픈 소스 코드를 가져다가 사용하는 것)

        자바스크립트를 조금더 편하게 사용하기 위해서 사용하는 것
        상위호환이라기엔 맞지 않는 것 같고
        조금이라도 더 쉽게 개발하기 위해서 만들어진 것
        자바스크립트 빡세게 해야 리엑트의 이해도 쉬워진다

        날이 갈수록 어렵게 배워야한다.
        그래야 다른 사람들과의 경쟁력이 생긴다.
        배워야 하는 기초지식, 사용방법만 알면 더 쉽고 효율적으로 사용할 수 있다.

    프레임워크 라이브러리의 차이
        - 프레임워크 : 코드를 작성할 때 필요한 틀(가이드라인)을 제공해주는 것 - 도구 같은 것
            ex) spring, django, angular
            내가 로그인 서비스를 만들려고 할 때 로그인 기능에 관한 기본적인 가이드라인을 제공해준다.

        - 라이브러리 : 선택권을 주는 것, 같은 로그인이더라도 paport, gortrue, 개발자가 코드의 다양한 선택권과 제어권을 가지고 있는 것
            ex) nodeJS로 설치되는 모든 패키지, reactJS, jquery


-------------------------------------------------------------------------------------------------------

    React의 구동 원리와 핵심 컨셉

        복잡한 사이트 구조는 재사용성이나 사용성이 낮아지기 때문에 구역별로 나누어 제작한다.
        이 두가지 컨셉이 제일 중요한 2가지

        Components (조각)
            - 하나의 페이지를 한가지 이상의 기능을 수행하는 UI단위로 분리한 것
            - 재사용이 용이

        Virtual Dom (가상 돔) 매우중요!!
            - React가 가지고 있는 가상 DOM, DOM의 복사본
            - state(상태)를 react 구독, 만약 상태의 변화가 생기면 그때 화면을 리랜더
            - 멀쩡한 화면을 납두고 복사본 화면을 사용하는 이유
                - 사용자에게 화면을 다시 보여주기 위해서는 코스트(비용)이 든다.
                - 단순하게 교체만 하는 것이 아닌 처음부터 그려줘야 한다.
                - 가상돔을 이용해서 state라는 고유의 변수값이 변경될 때 이 때 사용자 화면을 바꿀 수 있다.
                - 개발자가 사용자 화면변환의 타이밍을 정할 수 있다.

        사용자가 어떤 상황일 때 레이어를 교체할지 개발자가 지정할 수 있음
        자바스크립트는 그 순간순간 바로 바뀜

        반드시 알아둬야 할 것 !!!!!!!!!!!!!!!!!!! 이 세가지가 제일 중요함 !!!
        * 컴포넌트, 가상 돔, 상태(실제돔과 비교, 변화가 있으면 화면을 랜더 위한 변수)

        쪼개고 분해했다가 나중에 모아서 완성하는 것
---------------------------------------------------------------------------------------------------------

    React는 CSR, SPA이다.

        CSR(Client Side Rendering) -> 사용자 측에서 화면을 그린다. -> 사용자가 웹페이지에 접속
                                -> 프론트엔드는 화면을 그리기 위한 리소스 전달

                                장점 : 페이지에 필요한 리소스를 한번에 전달, 해당 데이터를 통해서 다시 프론트엔드 서버와 소통 없이도 랜더링이 가능
                                초기 첫 페이지 랜더링 속도가 느림, 그러나 그 이후의 랜더링 속도는 상대적으로 빠름

                                단점 : 초기 페이지 랜더링 느림, SEO(검색 엔진 최적화)에 불리, 사용자 하드웨어에 의존

        SSR(Server Side Rendering) -> 서버에서 페이지를 그린다. -> 사용자가 웹페이지 접속 -> 서버에서 페이지 랜더링 -> 완성된 페이지 전달
                                JS를 실행하지 않아도 화면을 보여줄 수 있음(완성된 페이지를 빨리 볼 수 있음)
                                하지만 JS는 브라우저에 의해 실행되므로 사용자에게 먼저 페이지를 보여주고 하이드레이션(수분공급)을 통해 JavaScript를 브라우저에 실행

                                장점 : SEO에 유리, 웹사이트를 검색엔진이 크롤링할 때 페이지의 완성본을 조회하기 때문에, 수집할 수 있는 데이터가 많아지고
                                검색엔진 최적화에 유리
                                완성된 페이지가 보이는 속도가 빠름

                                단점 : 서버 부담 증가(생산 비용 증가), 무거운 페이지라면 오히려 CSR보다 속도가 느림

------------------------------------------------------------------------------------------------------------

    SPA(Single Page Application)
        말 그대로 페이지가 1개인 애플리케이션(.html)
        reactJS와 같이 컴포넌트로 분리된 라이브러리나 프레임워크는 SPA에 최적화

    MPA(Multi Page Application)
        페이지가 여러개인 애플리케이션(.html)

---------------------------------------------------------------------------------------------------------------

    React = CSR, SPA 최적화 되어있다. (사용자가 화면을 그리고 페이지가 하나인 앱)

---------------------------------------------------------------------------------------------------------------    

    패키지 관리툴(npm, npx, yarn, yarn2) - 라이브러리를 관리하고 설치할 수 있는 도구
    npm, npx, yarn, yarn berry(yarn2)

    npm - nodeJS에서 기본적으로 내장되어있는 관리 툴
    ex) npm i(install) 라이브러리명 : 설치
        npm rm(remove) 라이브러리명 : 삭제
        npm i -g 라이브러리명 : 노드 환경 전역에서 설치
        npm i -D 라이브러리명 : 개발 환경에서만 사용할 라이브러리 

    npx 
        npm과 달리 라이브러리를 설치하지 않고 실행시켜주는 도구
        개발하는 입장이라면 npm과 npx의 차이를 모를 수 있지만
        npx를 사용해야하는 경우는 내프로젝트에 라이브러리를 추가하지 않고
        일회성으로 실행만 하는 경우, 너무 무거워서 실행해야하는 경우 사용하는 툴
        npm과 마찬가지로 내장되어있다.

        ex) npx create-reat-app 프로젝트명   

    yarn
        npm보다 속도도 뛰어나고 안정성 및 보안성 모두 월등한 기능
        하지만, npm의 패치로 인하여 현재로서는 그 차이를 느끼기에는 애매함

        yarn add 라이브러리명
        yarn remove 라이브러리명

    yarn berry
        npm과 yarn으로 설치된 라이브러리들은 node_modules라고 하는 파일에 저장,
        그러나 이러한 node_modules가 용량이 너무 크기 때문에 배포하는 과정에서 시간이 소요

        이러한 획기적으로 줄이기 위하면 Plug'n'Play 방식을 도입 Zero install 알집으로 파일을 관리 프로젝트 관리 및 빌드가 빠르다.

    monorepo,multirepo              

--------------------------------------------------------------------------------------------------------------

    React 프로젝트 생성
        1. CRA(create-react-app)
        2. vite - 최근에는 대부분 더 많이 사용된다. / 더 빠른 속도와 설치 속도 / 하지만 안정성때문에 일단은 공부할 때는 CRA 사용 
                - (esbuild, 번들링 없이 프로젝트 빠르게 빌드한다.)
                
        1. 터미널 경로 지정
        2. 생성 명령어 입력
            npx create-react-app 프로젝트명 

------------------------------------------------------------------------------------------------------------------

    프로젝트 구조
        node_modules : 현재 프로젝트에 설치된 라이브러리들의 실제 코드들이 저장 용량이 큼, git에 올리지 않음
                        -- package에 의해서 설치되었었던 목록이 이미 저장
                        -- npm install
                        -- package.json에 있는 라이브러리를 자동으로 설치
                        -- 실제 리엑트에서 대부분의 용량을 차지 / git에서는 제외
                        
        public : 정적 파일 관리, 페비콘, index.html, sitemap.xml, robots.text
            나중에 SEO에 필요한 파일, 검색엔진에 가이드라인을 제공하는 파일, 검색엔진에 어떤것이라는지 설명 + 이런 것을 노출하고 싶지않다라는 설명 
        src : 개발이 진행되는 곳 / 내가 개발하는 고의 모든 파일이 들어있다.
        gitignore : git에 커밋하고 싶지 않은 파일을 정리. 기본 세팅이 있긴하지만 추가하고 싶으면 직접 작성해서 추가한다.
        package-lock.json : 해당 라이브러리의 설치 가능한 주소들이 저장
        package.json : 설치된 라이브러리의 목록과 버전을 관리, 실행 스크립트(명령어) 관리

                        -- npm start 로컬 환경에서 프론트엔드 서버를 실행
                        -- npm run build 프로젝트 배포 이전에 가능한 최소한의 경량화된 사이즈로 코드를 빌드
                        -- npm run test 테스트 코드 실행 - QA넘기기 전에 개발자들이 먼저 테스트를 해보기 위해 만들어진 코드
                        -- npm run eject 숨겨진 설정 파일을 보여주는 것
                        -- 스크립트는 커스텀도 가능

                        번들링을 통해 작은 파일로 만들어 배포한다.

-----------------------------------------------------------------------------------------------------------------------        

    src의 구조
        App.css -> App.js에 참조되는 기본 css파일 - 변경 가능
        App.js  -> index.js를 통해 index.html에 전달되어 보여지는 실제 컴포넌트 
                -> 라우팅(주소 설정), 라이브러리 설정 
        App.test.js -> 테스트 코드 샘플
        index.xss -> app.css와 동일
        index.js -> 최상위 컴포넌트, index.html의 root에 app.js를 랜더링시키는 역할
        reportWebvitals.js -> 프론트엔드 성능 체크, 더 좋은 도구가 많아서 사용X
        setupTests.js -> test-code에 필요한 라이브러리 전역 설정

---------------------------------------------------------------------------------------------------------------------                 

    바벨, 모듈번들러, react의 컴포넌트를 직접 생성, 폴더 구조, styled-Components(css-in-js)
    tailwind(소개)


    리엑트에 관한 정리 글 블로그에 올리기
    - 면접,자기 어필, 사용법이 중요한 것보다 내가 이런걸 공부했다라는 걸 보여주는 것
    프로젝트 회고록 블로그 올리기
    